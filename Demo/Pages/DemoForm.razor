@page "/demoform"
@using FRTForm.Parameters

<link href="css/BlazoredModalCustom.css" rel="stylesheet"/>
<div class="demoForm"> @*use class for overall form styling*@
    <FormComponent AllParams="AllParams" Elements="_elements"
                   FormProcessor="_formProcessor" FormId="@_formId"
                   OnCloseCallback="@(Close)" OnDeleteCallback="@(Delete)"
                   OnEditCallback="@(Edit)" OnClickCallback="@(HandleClick)"
                   OnSubmitCallback="@(HandleSubmit)">
    </FormComponent>
    </div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }
    [Parameter] public IAllParams AllParams { get; set; }
    [Parameter] public string FormSpecsName { get; set; }

    private List<IFormElement> _elements;
    private IFormProcessor _formProcessor;
    private string _formId;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var appFormSpecsDictionary = AllParams.AppParams.AppFormSpecsDictionary;
        if (!appFormSpecsDictionary.ContainsKey(FormSpecsName))
        {
            var errorMessage = "AllParams.AppParams.AppFormSpecsDictionary ";
            errorMessage += "does not contain formSpecs named " + FormSpecsName;
            throw new ArgumentException(errorMessage);
        }
        // Because AppFormSpecsDictionary is static, always use .Clone
        var formSpecs = AllParams.AppParams.AppFormSpecsDictionary[FormSpecsName].Clone();
        _elements = formSpecs.Elements;
        _formProcessor = formSpecs.FormProcessor;
        _formId = formSpecs.FormId;
    }
    void Delete()
    {

    }

    async Task Edit()
    {
        await _formProcessor.UpdateElementsAsync(_elements, AllParams, false);
    }
    async Task HandleClick(string elementName)
    {
        // may want to call another form, depending on element
        var currentElement = _elements.FirstOrDefault(e => e.Name == elementName);
        await _formProcessor.HandleClickAsync(_elements, elementName, AllParams);
    }
    void HandleSubmit(EditContext editContext)
    {
        // submit only supposed to be enabled if all data valid
        // BUT should check for error messages in all elements
        var valid = true;
        foreach (var element in _elements)
        {
            if (!string.IsNullOrEmpty(element.ErrorMsg))
            {
                valid = false;
            }
        }
        if (valid)
        {
            _formProcessor.FormSubmittedAsync(_elements, AllParams);
            ModalResult result = ModalResult.Ok("");
            BlazoredModal.CloseAsync();// if all data changes handled in this method (including in IFormProcessor), no need to pass a param back
        }
        else
        {
            // else assume that element error messages are displayed
            // in any event, user will only have option of fixing errors or closing the form
        }
    }

    void Close()
    {
        BlazoredModal.CancelAsync();
    }
}
